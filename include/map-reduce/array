#ifndef GMAP_NDARRAY_
#define GMAP_NDARRAY_

#include <cstring>

#include <memory>
#include <type_traits>
#include <utility>

#if 0
template <typename T>
class container {
protected:
    unsigned long total_size_;

    inline
    explicit container(T *data) :
        data_(data)
    {
    }
public:
    T *data_;
};

template <typename T, unsigned DIM_SUB, unsigned NDIMS>
class common_subarray :
    public container<T> {

    friend class common_subarray<T, DIM_SUB - 1, NDIMS>;

protected:
    unsigned dim_sizes_[NDIMS];
    unsigned next_offs_[NDIMS - 1];

    common_subarray(common_subarray<T, DIM_SUB + 1, NDIMS> &parent, T *data) :
        container<T>(data)
    {
        for (unsigned i = NDIMS - DIM_SUB; i < NDIMS; i++) {
            dim_sizes_[i] = parent.dim_sizes_[i + 1];
        }

        for (unsigned i = NDIMS - DIM_SUB; i < NDIMS - 1; i++) {
            next_offs_[i] = parent.next_offs_[i + 1];
        }
    }

    inline
    common_subarray() :
        container<T>(nullptr)
    {
    }

public:
    inline
    unsigned dim_size(unsigned dim) const
    {
        return dim_sizes_[(NDIMS - DIM_SUB) + dim];
    }

};

template <typename T, unsigned DIM_SUB, unsigned NDIMS>
class subarray :
    public common_subarray<T, DIM_SUB, NDIMS> {

protected:
    inline
    subarray(subarray<T, DIM_SUB + 1, NDIMS> &parent, T *data) :
        common_subarray<T, DIM_SUB, NDIMS>(parent, data)
    {
    }

    inline
    subarray() :
        common_subarray<T, DIM_SUB, NDIMS>()
    {
    }

public:
    inline
    subarray<T, DIM_SUB - 1, NDIMS> operator[](unsigned idx)
    {
        //printf("Subarray at: %p\n", &container<T>::data_[idx * next_off_]);
        return subarray<T, DIM_SUB - 1, NDIMS>(*this, &container<T>::data_[idx * (this->next_offs_[NDIMS - DIM_SUB])]);
    }
};

template <typename T, unsigned NDIMS>
class subarray<T, 1, NDIMS> :
    public common_subarray<T, 1, NDIMS> {

    friend class subarray<T, 2, NDIMS>;

protected:
    inline
    subarray(subarray<T, 2, NDIMS> &parent, T *data) :
        common_subarray<T, 1, NDIMS>(parent, data)
    {
    }

    inline
    subarray() :
        common_subarray<T, 1, NDIMS>()
    {
    }

public:
    inline
    T &operator[](unsigned idx)
    {
        return container<T>::data_[idx];
    }

    inline
    const T &operator[](unsigned idx) const
    {
        return container<T>::data_[idx];
    }
};

template <typename T, unsigned NDIMS>
class ndarray : 
    public subarray<T, NDIMS, NDIMS> {
public:
    template <typename... SIZES>
    ndarray(SIZES... sizes)
    {
        static_assert(NDIMS > 0, "Number of dimensions must be greater than 0");
        static_assert(NDIMS == sizeof...(SIZES), "Number of dimensions do not match");

        container<T>::total_size_ = 1;

        init_ndarray(0, sizes...);
    }

    inline
    ~ndarray()
    {
        delete [] container<T>::data_;
    } 
    
private:
    void init_ndarray(unsigned index, unsigned dim_size)
    {
        subarray<T, NDIMS, NDIMS>::dim_sizes_[index] = dim_size;
        container<T>::total_size_ *= dim_size;

        container<T>::data_ = new T[container<T>::total_size_];

        long unsigned next_off = 1;
        for (unsigned i = NDIMS - 1; i > 0; i--) {
            next_off *= subarray<T, NDIMS, NDIMS>::dim_sizes_[i];
            subarray<T, NDIMS, NDIMS>::next_offs_[i - 1] = next_off;
        }
    }   
    template <typename... D>
    void init_ndarray(unsigned index, unsigned dim_size, D... dim_sizes)
    {
        subarray<T, NDIMS, NDIMS>::dim_sizes_[index] = dim_size;
        container<T>::total_size_ *= dim_size;

        init_ndarray(index+1, dim_sizes...);
    }
};
#endif

template <typename T>
struct array_info
{
    static const size_t elems = 1;
};

template <typename T, unsigned Idx, unsigned Curr>
struct array_dim_info
{
    constexpr static
    size_t get_size()
    {
        return 0;
    }
};

template <typename T, unsigned Size, unsigned Idx, unsigned Curr>
struct array_dim_info<T[Size], Idx, Curr>
{
    constexpr static
    size_t get_size()
    {
        return Idx == Curr? Size :
                            array_dim_info<T, Idx, Curr + 1>::get_size();
    }
};

template <typename T, size_t Size>
struct array_info<T[Size]>
{
    using base_type = typename std::remove_all_extents<T[Size]>::type;

    static const size_t elems = Size * array_info<T>::elems;
    const static size_t dims  = std::rank<T[Size]>::value;

    template <unsigned Idx>
    constexpr static
    size_t get_size()
    {
        return array_dim_info<T[Size], Idx, 0>::get_size();
    }
};

template <typename T>
struct array_get
{};

template <typename T, size_t Size>
struct array_get<T[Size]>
{
    template <typename... Args>
    static
    typename std::remove_all_extents<T>::type &
    get(T (&a)[Size], int i, Args... args)
    {
        return array_get<T>::get(a[i], args...);
    }

    template <typename... Args>
    static
    typename std::remove_all_extents<T>::type &
    get(T (&a)[Size], int i)
    {
        return a[i];
    }
};

template <typename T>
struct array
{
    static_assert(std::is_array<T>::value, "Type must be an array");
};

template <typename T>
using ref = T&;

template <typename T>
class array_ref
{
};

template <typename T>
class const_array_ref
{
};

template <typename T, size_t Size>
class array<T[Size]>;

template <typename T, size_t Size>
class array_ref<T[Size]> :
    public array_info<T[Size]>
{
private:
    T (*data_)[Size];

public:
    array_ref(array<T[Size]> &a);

    array_ref(T (*ptr)[Size]) :
        data_(ptr)
    {
    }

    T &operator[](int i)
    {
        return (*data_)[i];
    }

    const T &operator[](int i) const
    {
        return (*data_)[i];
    }
};

template <typename T, size_t Size>
class const_array_ref<T[Size]> :
    public array_info<T[Size]>
{
private:
    const T (*data_)[Size];

public:
    const_array_ref(const array<T[Size]> &a);

    const_array_ref(const_array_ref &ref) :
        data_(ref.data_)
    {
    }

    const_array_ref(T (*ptr)[Size]) :
        data_(ptr)
    {
    }

    T &operator[](int i)
    {
        return (*data_)[i];
    }

    const T &operator[](int i) const
    {
        return (*data_)[i];
    }
};

template <typename T, size_t Size>
class array<T[Size]> :
    public array_info<T[Size]>
{
    friend class array_ref<T[Size]>;

    using parent_info = array_info<T[Size]>;

private:
    std::unique_ptr<T[Size]> data_;
    //static constexpr size_t dims_[dims];

    static T
    (*make())[Size]
    {
        return (T(*)[Size]) new typename parent_info::base_type[parent_info::elems];
    }

public:
    array() :
        data_(array::make())
    {
    }

    array(const array &a) :
        data_(array::make())
    {
        ::memcpy(data_.get(), a.data_.get(), parent_info::elems * sizeof(array::base_type));
    }

    array(array &&a) :
        data_(std::move(a.data_))
    {
    }

    template <typename T2>
    array_ref<T2> reshape()
    {
        static_assert(parent_info::elems == array_info<T2>::elems,
                      "Total numer of elements do not match");
        static_assert(std::is_same<typename std::remove_all_extents<T2>::type,
                                   typename parent_info::base_type>::value,
                      "Base types do not match");
        return array_ref<T2>((T2 *) data_.get());
    }

    bool operator==(const array &a) const
    {
        if (this != &a) {
            typename parent_info::base_type *
                current = (typename parent_info::base_type *) data_.get();
            typename parent_info::base_type *
                other = (typename parent_info::base_type *) a.data_.get();

            return std::equal(current, current + parent_info::elems,
                              other);
        } else {
            return true;
        }
    }

    // Move assignment operator
    array &operator=(array &&a)
    {
        if (this != &a) {
            data_.reset(a.data_.release());
        }

        return *this;
    }

    // Assignment operator
    array &operator=(const array &a)
    {
        if (this != &a) {
            ::memcpy(data_.get(), a.data_.get(),
                     parent_info::elems * sizeof(array::base_type));
        }

        return *this;
    }

    T &operator[](int i)
    {
        return (*data_)[i];
    }

    const T &operator[](int i) const
    {
        return (*data_)[i];
    }

    template <typename... Args>
    typename parent_info::base_type &
    operator()(Args... args)
    {
        static_assert((sizeof...(Args)) == parent_info::dims, "Wrong number of indexes");
        return array_get<T[Size]>::get((*data_), args...);
    }

    template <typename... Args>
    const typename parent_info::base_type &
    operator()(Args... args) const
    {
        static_assert((sizeof...(Args)) == parent_info::dims, "Wrong number of indexes");
        return array_get<T[Size]>::get((*data_), args...);
    }

    template <unsigned Idx>
    constexpr static
    size_t get_size()
    {
        return parent_info::get_size<Idx>();
    }
};

template <typename T, size_t Size>
array_ref<T[Size]>::array_ref(array<T[Size]> &a) :
    data_(a.data_.get())
{
}

template <typename T, size_t Size>
const_array_ref<T[Size]>::const_array_ref(const array<T[Size]> &a) :
    data_(a.data_.get())
{
}

#endif

/* vim:set ft=cpp backspace=2 tabstop=4 shiftwidth=4 textwidth=120 foldmethod=marker expandtab: */
