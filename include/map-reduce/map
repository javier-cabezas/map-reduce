#ifndef MAPREDUCE_MAP_
#define MAPREDUCE_MAP_

#include <functional>
#include <omp.h>

#include "common"
#include "range"

namespace map_reduce {

namespace map_sched {
    enum base_policy {
        always = 5,
        never  = 7
    };

    template <unsigned Level = 0>
    struct parallel {
        static const base_policy when = always;
        static const unsigned level = Level;
    };

    struct serial {
        static const base_policy when = never;
        static const unsigned level = 0;
    };

    using automatic = parallel<0>;
};

template <unsigned Level, typename Func, typename Range, typename Policy>
struct wrapper_map {
    template<typename... Args>
    static void
    map(Func f, const Range &r, const Policy &p, Args &&... args)
    {
        typedef iterator<typename Range::type> myit;
        typedef dim_type<typename Range::type> mydim;

        mydim d = r.get_dim(sizeof...(Args));

        if (p.when == map_sched::base_policy::always &&
            p.level == sizeof...(Args)) {
            #pragma omp parallel for
            for (typename Range::type t  = d.begin;
                                      t  < d.end;
                                      t += d.step) {
                wrapper_map<Level - 1, Func, Range, Policy>::map(f, r, p, args..., t);
            }
        } else {
            for (typename Range::type t  = d.begin;
                                      t  < d.end;
                                      t += d.step) {
                wrapper_map<Level - 1, Func, Range, Policy>::map(f, r, p, args..., t);
            }
        }
    }

    static void
    map(Func f, const Range &r, const Policy &p)
    {
        typedef iterator<typename Range::type> myit;
        typedef dim_type<typename Range::type> mydim;

        mydim d = r.get_dim(0);

        if (p.when == map_sched::base_policy::always &&
            p.level == 0) {
            #pragma omp parallel for
            for (typename Range::type t  = d.begin;
                                      t  < d.end;
                                      t += d.step) {
                wrapper_map<Level - 1, Func, Range, Policy>::map(f, r, p, t);
            }
        } else {
            for (typename Range::type t  = d.begin;
                                      t  < d.end;
                                      t += d.step) {
                wrapper_map<Level - 1, Func, Range, Policy>::map(f, r, p, t);
            }
        }
    }
};

template <typename Func, typename Range, typename Policy>
struct wrapper_map<0, Func, Range, Policy> {
    template<typename... Args>
    static void
    map(Func f, const Range &r, const Policy &p, Args &&... args)
    {
        f(args...);
    }
};

template <typename Func, typename Range, typename Policy>
static
void map(Func f, const Range &r, const Policy &p)
{
    wrapper_map<Range::NDims, Func, Range, Policy>::map(f, r, p);
}

template <typename Func, typename Range>
static
void map(Func f, const Range &r)
{
    map(f, r, map_sched::automatic());
}

}

#endif

/* vim:set ft=cpp backspace=2 tabstop=4 shiftwidth=4 textwidth=120 foldmethod=marker expandtab: */
